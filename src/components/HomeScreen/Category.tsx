import React, { useState, useEffect } from "react";
import {
  FlatList,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
  ActivityIndicator,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";

// ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
type Category = {
  id: string;
  name: string;
  count: string;
  icon: string; // Assumed to map to valid Ionicons icon names
};

// Map valid Ionicons names
const validIcons: Record<string, keyof typeof Ionicons.glyphMap> = {
  home: "home",
  settings: "settings",
  search: "search",
  // Add all potential mappings here
};

const CategoryScreen: React.FC = () => {
  const [categories, setCategories] = useState<Category[]>([]); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  const [loading, setLoading] = useState<boolean>(true); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const [selected, setSelected] = useState<string>(""); // ‡πÄ‡∏Å‡πá‡∏ö ID ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å data.json
  const fetchCategories = async () => {
    try {
      setLoading(true);
      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå data.json
      const json = require("../../data/data.json"); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå
      setCategories(json.categories);
    } catch (error) {
      console.error("Error fetching data:", error);
    } finally {
      setLoading(false);
    }
  };

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å mount
  useEffect(() => {
    fetchCategories();
  }, []);

  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏´‡∏•‡∏î
  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#0056f6" />
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Text style={styles.sectionTitle}>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° üëÄ</Text>
      <FlatList
        data={categories}
        keyExtractor={(item) => item.id}
        horizontal
        showsHorizontalScrollIndicator={false}
        renderItem={({ item }) => (
          <TouchableOpacity
            style={[
              styles.categoryItem,
              selected === item.id && styles.selectedCategory,
            ]}
            onPress={() => setSelected(item.id)} // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î ID ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
          >
            {validIcons[item.icon] ? (
              <Ionicons name={validIcons[item.icon]} size={32} color="#0056f6" />
            ) : (
              <Text>‚ö†Ô∏è</Text> // Fallback for invalid icon names
            )}
            <Text style={styles.categoryText}>{item.name}</Text>
            <Text style={styles.categoryCount}>{item.count} ‡∏ä‡∏¥‡πâ‡∏ô</Text>
          </TouchableOpacity>
        )}
        contentContainerStyle={styles.flatListContainer}
      />
    </View>
  );
};

export default CategoryScreen;

// ‡∏™‡πÑ‡∏ï‡∏•‡πå
const styles = StyleSheet.create({
  container: {
    backgroundColor: "#fff",
    padding: 16,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 16,
  },
  flatListContainer: {
    paddingHorizontal: 0,
  },
  categoryItem: {
    alignItems: "center",
    padding: 12,
    backgroundColor: "#f9f9f9",
    borderRadius: 12,
    marginHorizontal: 5,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
    elevation: 3,
    width: 120,
  },
  selectedCategory: {
    backgroundColor: "#e8f3ff",
    borderColor: "#0056f6",
    borderWidth: 2,
  },
  categoryText: {
    fontSize: 14,
    fontWeight: "600",
    marginTop: 8,
    textAlign: "center",
  },
  categoryCount: {
    fontSize: 12,
    color: "#666",
    textAlign: "center",
    marginTop: 4,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
});
